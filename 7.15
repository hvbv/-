function Foo() {
            for (var i = 0; i < 5; i++) {
                setTimeout(function timer() {
                    console.log(i);
                }, 1000);
            }
            console.log(i);
        }
        Foo();
        //  解析：函数Foo有一个for循环，for里面是一个定时器，for循环了5次，那么定时器也将设定5个
        //   setTimeout也放在了队列的数据结构中(for循环),等待上下文的代码运行后才会去执行定时器，
        //    那么此时运行定时器，变量i已经变成了5(5个定时器的i都是5)，所以输出的是5 5 5 5 5 5 
        function Foo() {
            for (var i = 0; i < 5; i++) {
                (function(i) {
                    setTimeout(function timerr() {
                        console.log(i);
                    }, 1000);
                })(i);
            }
            console.log(i);
        }
        Foo();
        //  解析：函数Foo有一个for循环，for里面是一个IIFE函数(自执行函数)，这个函数里面有一个定时器
        //  for循环5次，那么这个定时器也将生成5个，由于IIFE声明函数的同时会立即调用函数一次，所以形成
        //  了一个私有作用域，变量i被独立起来，每个定时器输出的i就会都不同，所以输出的是5 0 1 2 3 4
        setTimeout(function() {
            console.log("BBBB");
        }, 1000);
        console.log("CCCC");
        setTimeout(function() {
            console.log("DDDD");
        }, 0);
        //  解析：setTimeout是在指定的时间后执行一段代码，所以先输出CCCC,回头看另外两个setTimeout,第一个
        //  是1000毫秒之后执行,第二个是0毫秒后执行,所以先输出DDDD,在1000毫秒之后输出BBBB,最后输出顺序为
        //  "CCCC"  "DDDD"  "BBBB"
        setTimeout(function() {
            console.log("BBBB");
        }, 1000);
        const start = new Date();
        while (new Date() - start < 3000) {}
        console.log("CCCC");
        setTimeout(function() {
            console.log("DDDD");
        }, 0);
        //  解析：setTimeout是在指定的时间后执行一段代码，执行下面的const start = new Date()。new Date()是
        //  实时的时间戳，所以执行这一步的时候，start被赋予的是当前的时间。接下来是while，while循环的执行条件
        //  是new Date() - start<3000,前面说过new Date()是实时的时间戳,所以是一直在增加的，当3000毫秒之后
        //  while执行结束，输出CCCC。之后执行两个setTimeout，因为while循环已经进行了3000毫秒了，所以第一个
        //  setTimeout已经结束了定时，所以会先输出BBBB，然后输出第二个定时器里面的DDDD，最后的输出顺序为
        //  "CCCC"  "BBBB"  "DDDD"


        var length = 10;

        function fn() {
            console.log(this.length);
        }
        var obj = {
            length: 5,
            method: function(fn) {
                fn();
                arguments[0]();
            }
        };
        obj.method(fn, 1);
        //  解析：全局定义了一个变量length、一个对象obj和一个函数fn、length的赋值为10。接下来
        //  是fn函数，输出this.lenght。对象obj中，obj.length是5，obj.method是一个函数，method
        //  函数中的形参也是一个函数，这个函数里面调用了fn函数，argument是一个伪数组，代表method
        //  函数实际接收到的参数列表，所以argument[0]()就代表了调用arguments里的第一项。obj.method
        //  （fn，1）代表的就是调用obj当中的method函数，并且传递了两个参数，fn和1；
        //  method函数当中调用的fn函数是全局中的函数，所以this是指向window的，this.length就是10，
        //  上面说了，arguments[0]()代表的是调用arguments里面的第一项，也就是传参进来的fn，所以这个
        //  this指向的是arguments，method函数接收的参数是两个，所以arguments.length就是2，最后的
        //  输出结果是10  2
        function a(xx){
            this.x = xx;
            return this;
        };
        var x = a(5);
        var y = a(6);
        console.log(x.x);
        console.log(y.x);
        //  解析：首先在全局中定义了一个变量x和变量y，还有函数a。函数a中的this.x等于接收到的参数
        //  返回this，注意返回的不是this.x，而是this。接下来给x赋值，值为a(5)，又给y赋值，值为
        //  a(6);
        //  a函数传了一个参数5，那么this.x就被赋值为了5，函数a的this指向的是window，也就是window.x
        //  等于5，上面说过函数返回的是this，也就是this指向window，x=a(5)相当于window.x=window，此时
        //  x被赋值为了window。下面又执行y=a(6)，也就是说，x的值再次发生了改变，变为了6，y被赋值给了
        //  window。console.log(x.x)相当于console.log(6.x),输出undefined。console.log(y.x)想当于
        //  console.log(window.x),输出6
        //  输出结果为undefined  6
   
